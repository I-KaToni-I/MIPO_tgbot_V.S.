
const fs = require('fs');
const TelegramApi = require("node-telegram-bot-api")
process.env.NTBA_FIX_350 = true;

// —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç –±–æ—Ç–∞
// const token = JSON.parse(fs.readFileSync("../keys.json", { encoding: 'utf8' }))['tgBotTEST']


const token = JSON.parse(fs.readFileSync("../keys.json", { encoding: 'utf8' }))['tgBotS']

const bot = new TelegramApi(token, { polling: true })



const {saveUser, setGroup, stressSave} = require("./user");
const {getDay} = require("./brains");
const {autoGroups, KEYBOARD_TodayTomorrow} = require("./key")



async function respondText(){
    await bot.on('message', msg => {
    
        let text = msg.text.toLowerCase().replace(/ +/g, ' ').trim();
        let chat_id = msg.chat.id;
        let botText
        console.log(text)
        console.log(chat_id);
    
        try {
            if (text === "/start" || text === "/about") {
                saveUser(msg)

                botText = "‚ö°Ô∏è–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –±—ã—Å—Ç—Ä–æ–º—É –ø–æ–ª—É—á–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. \n\nüß© –ß—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /setgroup \nüåÖ –ü–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ / —Å–µ–≥–æ–¥–Ω—è \n\nüîÑ –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—É–∂–µ –∫–æ–º–∞–Ω–¥—É /setgroup \n\nüéØ–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /getday \n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /getday 04.04.2024"
                
                return bot.sendMessage(chat_id, botText);
            }

            if (text === "/setgroup"){
                saveUser(msg)
          
                bot.sendMessage(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", autoGroups());
            }

            if (text === "—Å–µ–≥–æ–¥–Ω—è" || text === "–∑–∞–≤—Ç—Ä–∞"){
                stressSave(chat_id)
                bot.sendMessage(chat_id, getDay(chat_id, text), { parse_mode: 'HTML' }, KEYBOARD_TodayTomorrow)
            }

            if (text.split(' ')[0] === "/getday"){
                stressSave(chat_id)
                bot.sendMessage(chat_id, getDay(chat_id, text.split(' ')[1]), { parse_mode: 'HTML' }, KEYBOARD_TodayTomorrow)
            }

            
            
        } catch (error) {
            console.log(error);
        }
    
    })
}

async function respondButton(){
    await bot.on('callback_query', msg => {
        let dataBtn = msg.data;
        let chat_id = msg.message.chat.id;


        if (dataBtn.split(', ')[0] === '3849'){
            setGroup(chat_id, dataBtn.split(', ')[1])
      
            bot.sendMessage(chat_id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", KEYBOARD_TodayTomorrow);
        }
        
        
    })
}


respondText()
respondButton()